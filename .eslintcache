[{"D:\\itincubator\\nativJS-3-4\\src\\index.tsx":"1","D:\\itincubator\\nativJS-3-4\\src\\redux\\currencyReducer.ts":"2","D:\\itincubator\\nativJS-3-4\\src\\lessons\\lesson2\\lesson2.ts":"3","D:\\itincubator\\nativJS-3-4\\src\\lessons\\lesson4\\lesson_4.ts":"4"},{"size":319,"mtime":1609752860853,"results":"5","hashOfConfig":"6"},{"size":1088,"mtime":1609753971088,"results":"7","hashOfConfig":"6"},{"size":5844,"mtime":1660842847439,"results":"8","hashOfConfig":"6"},{"size":6381,"mtime":1661786500032,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mjqwnt",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\itincubator\\nativJS-3-4\\src\\index.tsx",[],"D:\\itincubator\\nativJS-3-4\\src\\redux\\currencyReducer.ts",[],"D:\\itincubator\\nativJS-3-4\\src\\lessons\\lesson2\\lesson2.ts",["19"],"console.log('lesson 2');\r\n\r\n// Lexical environment\r\n// http://jsflow.org/docs/lex-env/\r\n\r\n//// Closure\r\n// https://learn.javascript.ru/closure\r\n// https://developer.mozilla.org/ru/docs/Web/JavaScript/Closures\r\n// https://medium.com/@stasonmars/%D0%BF%D0%BE%D0%BD%D0%B8%D0%BC%D0%B0%D0%B5%D0%BC-%D0%B7%D0%B0%D0%BC%D1%8B%D0%BA%D0%B0%D0%BD%D0%B8%D1%8F-%D0%B2-javascript-%D1%80%D0%B0%D0%B7-%D0%B8-%D0%BD%D0%B0%D0%B2%D1%81%D0%B5%D0%B3%D0%B4%D0%B0-c211805b6898\r\n// https://www.youtube.com/watch?v=pahO5XjnfLA\r\n\r\n//// Сurrying\r\n// https://learn.javascript.ru/currying-partials\r\n// https://medium.com/@stasonmars/%D0%BF%D0%BE%D0%BD%D0%B8%D0%BC%D0%B0%D0%B5%D0%BC-%D0%BA%D0%B0%D1%80%D1%80%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B2-javascript-5ec4a1d88827\r\n\r\n// Pattern Module\r\n// https://habr.com/ru/company/ruvds/blog/419997/\r\n\r\n// Recursion\r\n// https://learn.javascript.ru/recursion\r\n// https://www.youtube.com/watch?v=Kuq6oIN3PH0\r\n\r\n\r\n// Task 01\r\n// Реализовать функцию sum которая суммирует 2 числа следующим образом sum(3)(6) === 9\r\n\r\n/*function curry(f: (a: number, b: number) => number) {\r\n    return function (a: number) {\r\n        return function (b: number) {\r\n            return f(a, b);\r\n        };\r\n    };\r\n}\r\n\r\nfunction sum(a: number, b: number) {\r\n    return a + b;\r\n}\r\n\r\nlet curriedSum = curry(sum);\r\n\r\nconsole.log(curriedSum(3)(6))*/\r\n\r\n// Task 02\r\n// Реализовать функцию makeCounter которая работает следующим образом:\r\n// const counter = makeCounter();\r\n// counter(); // 1\r\n// counter(); // 2\r\n// const counter2 = makeCounter();\r\n// counter2(); // 1\r\n// counter(); // 3\r\n\r\n/*const makeCounter = () => {\r\n    let count = 0\r\n    return () => console.log(++count)\r\n}\r\n\r\nconst counter = makeCounter();\r\ncounter(); // 1\r\ncounter(); // 2\r\nconst counter2 = makeCounter();\r\ncounter2(); // 1\r\ncounter(); // 3*/\r\n\r\n\r\n// Task 03\r\n// Переписать функцию из Task 02 так, что бы она принимала число в качестве аргумента и это число было стартовым значением счетчика\r\n// и возвращала следующий объект методов:\r\n// increase: +1\r\n// decrease: -1\r\n// reset: установить счетчик в 0;\r\n// set: установить счетчик в заданное значение;\r\n\r\n/*const makeCounter2 = (start: number) => {\r\n    let count = start\r\n    return {\r\n\r\n        increase() {\r\n            console.log(++count)\r\n        },\r\n        decrease() {\r\n            console.log(--count)\r\n        },\r\n        reset() {\r\n            console.log(count=0)\r\n        },\r\n        set() {\r\n            console.log(count=start)\r\n        },\r\n    }\r\n}\r\n\r\nconst counterObj = makeCounter2(2);\r\ncounterObj.increase(); // 3\r\ncounterObj.reset()// 0\r\nconst counterObj2 = makeCounter2(3);\r\ncounterObj2.increase(); // 4\r\ncounterObj2.set(); // 3\r\ncounterObj.decrease() //-1*/\r\n\r\n// Task 04*\r\n// Реализовать функцию superSum которая принимает число в качестве аргумента, которое указывает на количество слагаемых\r\n// и что бы корректно работали следующие вызовы:\r\n// 1) superSum(0) //0\r\n// 2) superSum(3)(2)(5)(3) //10\r\n// 3) superSum(3)(2)(5,3) //10\r\n// 4) superSum(3)(2,5,3) //10\r\n// 5) superSum(3)(2,5)(3) //10\r\n// 6) superSum(3)(2,5)(3,9) //10\r\n\r\n// P.S. типизируйте только аргументы, а при вызове функции используйте @ts-ignore\r\n\r\n\r\n/*function sum(n: number) {\r\n\r\n    let currentArray: number[] = [];\r\n    let counter = 0\r\n    let currentSum : number = 0\r\n    function f(...args: number[]) {\r\n        currentArray = [...currentArray,...args]\r\n            counter += args.length\r\n            return f;\r\n    }\r\n\r\n    f.toString = function() {\r\n        for (let x in currentArray) {\r\n            currentSum += +x\r\n        }\r\n        return currentSum\r\n    }\r\n\r\n    return f\r\n}\r\n\r\nalert(sum(3)(2,5)(3)(2,3))*/\r\n\r\n\r\n// Task 05\r\n// решить все задачи по рекурсии которые даны в конце статьи https://learn.javascript.ru/recursion\r\n\r\n//1)\r\n/*const sumTo = (n: number) => {\r\n    let sum = 0\r\n\r\n    if(n!==0){\r\n        sum = n + sumTo(n-1)\r\n    }\r\n\r\n    return sum\r\n}\r\n\r\nconsole.log(sumTo(5))*/\r\n\r\n//2)\r\n\r\n/*const factorial = (n: number)=> {\r\n    let result = 1\r\n    if(n!==1 && n!==0){\r\n        result = n * factorial(n-1)\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nconsole.log(factorial(5))*/\r\n\r\n//3)\r\n\r\n/*const fib = (n: number) => {\r\n\r\n    let result = 1\r\n\r\n    if(n!==1 && n!==2){\r\n        result = fib(n-1) + fib(n-2)\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nconsole.log(fib(7))*/\r\n\r\n//4)\r\n\r\n/*let list = {\r\n    value: 1,\r\n    next: {\r\n        value: 2,\r\n        next: {\r\n            value: 3,\r\n            next: {\r\n                value: 4,\r\n                next: null\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nconst printList = (obj: any) => {\r\n\r\n    console.log(obj.value)\r\n    if (obj.next) {\r\n        printList(obj.next)\r\n    }\r\n\r\n}\r\n\r\nconst printListReverse = (obj: any) => {\r\n\r\n    if (obj.next) {\r\n        printListReverse(obj.next)\r\n    }\r\n    console.log(obj.value)\r\n\r\n}\r\n\r\nprintListReverse(list)*/\r\n\r\n// Task 06\r\n// написать функцию, которая повторяет функционал метода flat массива на всю глубину.\r\n\r\n/*const flat = (arr: Array<any>) => {\r\n    let result:any = []\r\n\r\n    arr.forEach((el) => {\r\n            Array.isArray(el)? result = [...result, ...flat(el)] : result.push(el)\r\n        }\r\n    )\r\n\r\n    return result\r\n}\r\n\r\nconsole.log(flat([0, 1, 2, [3, 4], 5, [[6,[7,8]],9]]))*/\r\n\r\n// just a plug\r\nexport default () => {\r\n};","D:\\itincubator\\nativJS-3-4\\src\\lessons\\lesson4\\lesson_4.ts",["20","21"],{"ruleId":"22","severity":1,"message":"23","line":234,"column":1,"nodeType":"24","endLine":235,"endColumn":3},{"ruleId":"25","severity":1,"message":"26","line":11,"column":5,"nodeType":"27","messageId":"28","endLine":11,"endColumn":12},{"ruleId":"22","severity":1,"message":"23","line":162,"column":1,"nodeType":"24","endLine":162,"endColumn":23},"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'promise' is assigned a value but never used.","Identifier","unusedVar"]